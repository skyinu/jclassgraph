import java.nio.file.FileVisitResult
import java.nio.file.Files
import java.nio.file.SimpleFileVisitor
import java.nio.file.attribute.BasicFileAttributes
import java.nio.file.Path

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

group 'com.skyinu.classanalyze'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    flatDir { dirs 'libs' }
}
sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
    main.java.srcDirs += 'src/main/java/'
}

jar {
    manifest {
        attributes 'Main-Class': 'com.skyinu.classanalyze.JClassUsageFinderEntry'
    }
}

shadowJar {
    archiveClassifier.set('')
}

dependencies {
    implementation fileTree("libs")
    implementation "commons-cli:commons-cli:1.3.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'org.ow2.asm:asm:5.0.1'
    implementation 'net.lingala.zip4j:zip4j:2.9.1'
    implementation 'com.google.code.gson:gson:2.8.9'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

def sp = File.separator
def resourceDir = new File(projectDir, "src" + sp + "main" + sp + "resources" + sp + "fe")
if (resourceDir.exists()) {
    return
}
def htmlProject = new File(projectDir.parent, "fe_show")
final Path targetPath = resourceDir.toPath()
final Path sourcePath = htmlProject.toPath()
Files.walkFileTree(sourcePath, new SimpleFileVisitor<Path>() {
    @Override
    public FileVisitResult preVisitDirectory(final Path dir,
                                             final BasicFileAttributes attrs) throws IOException {
        Files.createDirectories(targetPath.resolve(sourcePath
                .relativize(dir)))
        return FileVisitResult.CONTINUE
    }

    @Override
    public FileVisitResult visitFile(final Path file,
                                     final BasicFileAttributes attrs) throws IOException {
        Files.copy(file,
                targetPath.resolve(sourcePath.relativize(file)));
        return FileVisitResult.CONTINUE
    }
})
